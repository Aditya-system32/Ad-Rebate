{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WorkSpace\\\\Web Projects\\\\Ad-rebate\\\\Screens\\\\AdsVideo.js\";\nimport \"react-native-gesture-handler\";\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport { Video } from \"expo-av\";\nimport { db } from \"../firebases\";\nimport { color } from \"react-native-reanimated\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\nimport { AuthContext } from \"../routes/AuthProvider\";\nexport default function AdsVideoScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(route.params.paramKey),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedClient = _useState2[0],\n      setselectedClient = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      adCategoryData = _useState4[0],\n      setadCategoryData = _useState4[1];\n\n  var _useState5 = useState(2),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentAdIndex = _useState6[0],\n      setCurrentAdIndex = _useState6[1];\n\n  var _useState7 = useState(0.0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      progressBarStatus = _useState8[0],\n      setProgressBarStatus = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      qAnswered = _useState10[0],\n      setqAnswered = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      qNa = _useState12[0],\n      setqNa = _useState12[1];\n\n  var randomNumber = Math.floor(Math.random() * 2 + 0);\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      showQnA = _useState14[0],\n      setshowQnA = _useState14[1];\n\n  var videoData = [];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      adDataToPlay = _useState16[0],\n      setadDataToPlay = _useState16[1];\n\n  var _useContext = useContext(AuthContext),\n      user = _useContext.user,\n      setUserData = _useContext.setUserData,\n      setBannerData = _useContext.setBannerData,\n      userData = _useContext.userData;\n\n  useEffect(function () {\n    var temp = [];\n\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", db.collectionGroup(\"Ads\").where(\"city\", \"==\", \"bhilai\").where(\"category\", \"==\", \"cafe\").get().then(function (snap) {\n                snap.forEach(function (doc) {\n                  temp.push(doc.data());\n                });\n                setadCategoryData(temp);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  function checkAns(ans) {\n    var current, d;\n    return _regeneratorRuntime.async(function checkAns$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(ans === Number(qNa.correctAnswer))) {\n              _context2.next = 7;\n              break;\n            }\n\n            current = new Date();\n            d = current.getDate() + \"-\" + (current.getMonth() + 1) + \"-\" + current.getFullYear();\n            console.log(d);\n            db.collection(\"ClientData\").doc(qNa.client).collection(\"Ads\").doc(qNa.id).collection(\"Reviews\").doc(user.uid).set({\n              client: qNa.client,\n              date: d,\n              userId: user.uid,\n              username: userData.username,\n              question: qNa.question\n            }).then(function () {\n              console.log(\"saved to db\");\n              setqAnswered(true);\n            }).catch(function (err) {\n              return console.log(err);\n            });\n            _context2.next = 13;\n            break;\n\n          case 7:\n            if (!(currentAdIndex === 2)) {\n              _context2.next = 13;\n              break;\n            }\n\n            ToastAndroid.showWithGravity(\"Wrong answer! Please watch Ad again\", ToastAndroid.SHORT, ToastAndroid.BOTTOM);\n            setshowQnA(false);\n            _context2.next = 12;\n            return _regeneratorRuntime.awrap(setCurrentAdIndex(1));\n\n          case 12:\n            setCurrentAdIndex(2);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    var clientAd = {};\n    var adsExSelCli = [];\n\n    if (adCategoryData) {\n      clientAd = adCategoryData.filter(function (client) {\n        return client.client == selectedClient;\n      })[randomNumber];\n      videoData.push(clientAd.link);\n      adsExSelCli = adCategoryData.filter(function (client) {\n        return client.client !== selectedClient;\n      });\n\n      for (var i = 0; i < 2; i++) {\n        var randomAd = adsExSelCli[Math.floor(Math.random() * adCategoryData.filter(function (client) {\n          return client.client != selectedClient;\n        }).length)];\n\n        if (i === 1) {\n          setqNa({\n            id: randomAd.id,\n            client: randomAd.client,\n            question: randomAd.question,\n            correctAnswer: randomAd.correctAnswer,\n            option1: randomAd.option1,\n            option2: randomAd.option2\n          });\n        }\n\n        videoData.push(randomAd.link);\n      }\n\n      var addatavideos = [];\n\n      if (videoData.length === 3) {\n        videoData.forEach(function (element) {\n          anyNameFunction(element);\n        });\n        setadDataToPlay(addatavideos);\n      }\n\n      function anyNameFunction(link) {\n        return _regeneratorRuntime.async(function anyNameFunction$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                fetch(\"https://adrebate.herokuapp.com/api/getAd?adLink=\" + link, {\n                  method: \"GET\"\n                }).then(function (response) {\n                  return response.json();\n                }).then(function (responseJson) {\n                  setadDataToPlay(function (old) {\n                    return [].concat(_toConsumableArray(old), [responseJson.link]);\n                  });\n                }).catch(function (error) {\n                  console.error(error);\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }\n  }, [adCategoryData]);\n  useEffect(function () {\n    if (qAnswered) {\n      setshowQnA(false);\n      navigation.navigate(\"GetCoupon\", {\n        paramKey: selectedClient\n      });\n    } else {}\n  }, [qAnswered]);\n\n  var _onPlaybackStatusUpdate = function onPlaybackStatusUpdate(playbackStatus) {\n    if (playbackStatus.isPlaying) {\n      setProgressBarStatus(playbackStatus.positionMillis / 30000);\n    } else {}\n\n    if (playbackStatus.didJustFinish) {\n      if (currentAdIndex === 2) {\n        setshowQnA(true);\n      } else {\n        setCurrentAdIndex(currentAdIndex + 1);\n      }\n    } else {}\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    backgroundColor: \"black\",\n    barStyle: \"light-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }), qNa && showQnA ? React.createElement(View, {\n    elevation: 5,\n    style: styles.questionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, qNa.question), React.createElement(TouchableNativeFeedback, {\n    onPress: function onPress() {\n      return checkAns(1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, qNa.option1)), React.createElement(TouchableNativeFeedback, {\n    onPress: function onPress() {\n      return checkAns(2);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, qNa.option2))) : null, adDataToPlay.length < 3 ? React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \"Loading\")) : React.createElement(View, {\n    style: styles.adContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.adCurrentIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.adCurrentFont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, currentAdIndex + 1)), React.createElement(ProgressBar, {\n    progress: progressBarStatus,\n    color: Colors.blue200,\n    style: styles.progressBar,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }), React.createElement(Video, {\n    source: {\n      uri: adDataToPlay[currentAdIndex] ? adDataToPlay[currentAdIndex] : null\n    },\n    onPlaybackStatusUpdate: function onPlaybackStatusUpdate(playbackStatus) {\n      return _onPlaybackStatusUpdate(playbackStatus);\n    },\n    rate: 1.0,\n    volume: 1.0,\n    isMuted: false,\n    resizeMode: \"cover\",\n    shouldPlay: true,\n    style: styles.video,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  correctAnswer: {\n    backgroundColor: \"#5eca6c\"\n  },\n  option: {\n    width: \"90%\",\n    borderRadius: 10,\n    height: \"22%\",\n    fontSize: 15,\n    fontFamily: \"Poppins-Medium\",\n    backgroundColor: \"transparent\",\n    color: \"rgba(255, 255, 255, 0.651)\",\n    backgroundColor: \"rgba(82, 82, 82, 0.247)\",\n    paddingTop: \"4.5%\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginTop: 15\n  },\n  question: {\n    width: \"100%\",\n    display: \"flex\",\n    borderRadius: 20,\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 0,\n    height: \"30%\",\n    fontSize: 18,\n    fontFamily: \"Poppins-SemiBold\",\n    color: \"rgba(255, 255, 255, 0.842)\",\n    paddingTop: \"8%\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  },\n  questionContainer: {\n    marginTop: \"50%\",\n    zIndex: 5,\n    width: \"80%\",\n    height: \"30%\",\n    top: 0,\n    backgroundColor: \"#000000\",\n    borderRadius: 15,\n    borderColor: \"rgba(255, 255, 255, 0.842)\",\n    borderWidth: 1,\n    position: \"absolute\",\n    alignSelf: \"center\",\n    alignItems: \"center\"\n  },\n  adContainer: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n    borderWidth: 2,\n    borderStyle: \"solid\"\n  },\n  progressBar: {\n    height: 5,\n    width: Dimensions.get(\"window\").width,\n    backgroundColor: \"black\"\n  },\n  video: {\n    zIndex: -1,\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n    position: \"absolute\",\n    alignSelf: \"center\"\n  },\n  adCurrentIndex: {\n    zIndex: 1,\n    position: \"absolute\",\n    top: 10,\n    alignSelf: \"center\",\n    right: 10,\n    backgroundColor: \"rgba(209, 209, 209, 0.301)\",\n    width: 40,\n    height: 40,\n    flexDirection: \"row\",\n    borderRadius: 50,\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    fontFamily: \"Poppins-Medium\"\n  },\n  adCurrentFont: {\n    fontSize: 18,\n    fontFamily: \"Poppins-Medium\"\n  },\n  container: {\n    flex: 1,\n    position: \"relative\",\n    height: Dimensions.get(\"window\").height,\n    backgroundColor: \"black\"\n  }\n});","map":{"version":3,"sources":["D:/WorkSpace/Web Projects/Ad-rebate/Screens/AdsVideo.js"],"names":["React","useState","useEffect","useRef","useContext","Video","db","color","ProgressBar","Colors","AuthContext","AdsVideoScreen","navigation","route","params","paramKey","selectedClient","setselectedClient","adCategoryData","setadCategoryData","currentAdIndex","setCurrentAdIndex","progressBarStatus","setProgressBarStatus","qAnswered","setqAnswered","qNa","setqNa","randomNumber","Math","floor","random","showQnA","setshowQnA","videoData","adDataToPlay","setadDataToPlay","user","setUserData","setBannerData","userData","temp","collectionGroup","where","get","then","snap","forEach","doc","push","data","checkAns","ans","Number","correctAnswer","current","Date","d","getDate","getMonth","getFullYear","console","log","collection","client","id","uid","set","date","userId","username","question","catch","err","ToastAndroid","showWithGravity","SHORT","BOTTOM","clientAd","adsExSelCli","filter","link","i","randomAd","length","option1","option2","addatavideos","element","anyNameFunction","fetch","method","response","json","responseJson","old","error","navigate","onPlaybackStatusUpdate","playbackStatus","isPlaying","positionMillis","didJustFinish","styles","container","questionContainer","option","adContainer","adCurrentIndex","adCurrentFont","blue200","progressBar","uri","video","StyleSheet","create","backgroundColor","width","borderRadius","height","fontSize","fontFamily","paddingTop","alignItems","textAlign","flexDirection","justifyContent","marginTop","display","borderBottomLeftRadius","borderBottomRightRadius","zIndex","top","borderColor","borderWidth","position","alignSelf","Dimensions","borderStyle","right","flex"],"mappings":"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","sourcesContent":["import \"react-native-gesture-handler\";\r\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  StatusBar,\r\n  ActivityIndicator,\r\n  Dimensions,\r\n  ToastAndroid,\r\n  TouchableNativeFeedback,\r\n} from \"react-native\";\r\nimport { Video } from \"expo-av\";\r\nimport { db } from \"../firebases\";\r\nimport { color } from \"react-native-reanimated\";\r\nimport { ProgressBar, Colors } from \"react-native-paper\";\r\nimport { AuthContext } from \"../routes/AuthProvider\";\r\n\r\nexport default function AdsVideoScreen({ navigation, route }) {\r\n  const [selectedClient, setselectedClient] = useState(route.params.paramKey);\r\n  const [adCategoryData, setadCategoryData] = useState(null);\r\n  const [currentAdIndex, setCurrentAdIndex] = useState(2);\r\n  const [progressBarStatus, setProgressBarStatus] = useState(0.0);\r\n  const [qAnswered, setqAnswered] = useState(false);\r\n  const [qNa, setqNa] = useState(null);\r\n  const randomNumber = Math.floor(Math.random() * 2 + 0);\r\n  const [showQnA, setshowQnA] = useState(false);\r\n  const videoData = [];\r\n  const [adDataToPlay, setadDataToPlay] = useState([]);\r\n  const { user, setUserData, setBannerData, userData } = useContext(\r\n    AuthContext\r\n  );\r\n  //for loading all ads from selected category\r\n  useEffect(() => {\r\n    const temp = [];\r\n    (async () =>\r\n      db\r\n        .collectionGroup(\"Ads\")\r\n        .where(\"city\", \"==\", \"bhilai\")\r\n        .where(\"category\", \"==\", \"cafe\")\r\n        .get()\r\n        .then((snap) => {\r\n          snap.forEach((doc) => {\r\n            temp.push(doc.data());\r\n          });\r\n          setadCategoryData(temp);\r\n        }))();\r\n  }, []);\r\n\r\n  //\r\n\r\n  async function checkAns(ans) {\r\n    if (ans === Number(qNa.correctAnswer)) {\r\n      const current = new Date();\r\n      const d =\r\n        current.getDate() +\r\n        \"-\" +\r\n        (current.getMonth() + 1) +\r\n        \"-\" +\r\n        current.getFullYear();\r\n      console.log(d);\r\n      db.collection(\"ClientData\")\r\n        .doc(qNa.client)\r\n        .collection(\"Ads\")\r\n        .doc(qNa.id)\r\n        .collection(\"Reviews\")\r\n        .doc(user.uid)\r\n        .set({\r\n          client: qNa.client,\r\n          date: d,\r\n          userId: user.uid,\r\n          username: userData.username,\r\n          question: qNa.question,\r\n        })\r\n        .then(() => {\r\n          console.log(\"saved to db\");\r\n          setqAnswered(true);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      if (currentAdIndex === 2) {\r\n        ToastAndroid.showWithGravity(\r\n          \"Wrong answer! Please watch Ad again\",\r\n          ToastAndroid.SHORT,\r\n          ToastAndroid.BOTTOM\r\n        );\r\n        setshowQnA(false);\r\n        await setCurrentAdIndex(1);\r\n        setCurrentAdIndex(2);\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    let clientAd = {};\r\n    let adsExSelCli = [];\r\n    if (adCategoryData) {\r\n      clientAd = adCategoryData.filter(\r\n        (client) => client.client == selectedClient\r\n      )[randomNumber];\r\n      videoData.push(clientAd.link);\r\n\r\n      adsExSelCli = adCategoryData.filter(\r\n        (client) => client.client !== selectedClient\r\n      );\r\n      for (let i = 0; i < 2; i++) {\r\n        const randomAd =\r\n          adsExSelCli[\r\n            Math.floor(\r\n              Math.random() *\r\n                adCategoryData.filter(\r\n                  (client) => client.client != selectedClient\r\n                ).length\r\n            )\r\n          ];\r\n        if (i === 1) {\r\n          setqNa({\r\n            id: randomAd.id,\r\n            client: randomAd.client,\r\n            question: randomAd.question,\r\n            correctAnswer: randomAd.correctAnswer,\r\n            option1: randomAd.option1,\r\n            option2: randomAd.option2,\r\n          });\r\n        }\r\n        videoData.push(randomAd.link);\r\n      }\r\n      let addatavideos = [];\r\n\r\n      if (videoData.length === 3) {\r\n        videoData.forEach((element) => {\r\n          anyNameFunction(element);\r\n        });\r\n        setadDataToPlay(addatavideos);\r\n      }\r\n\r\n      async function anyNameFunction(link) {\r\n        fetch(`https://adrebate.herokuapp.com/api/getAd?adLink=${link}`, {\r\n          method: \"GET\",\r\n        })\r\n          .then((response) => response.json())\r\n          .then((responseJson) => {\r\n            setadDataToPlay((old) => [...old, responseJson.link]);\r\n          })\r\n          .catch((error) => {\r\n            console.error(error);\r\n          });\r\n      }\r\n    }\r\n  }, [adCategoryData]);\r\n\r\n  useEffect(() => {\r\n    if (qAnswered) {\r\n      setshowQnA(false);\r\n      navigation.navigate(\"GetCoupon\", {\r\n        paramKey: selectedClient,\r\n      });\r\n    } else {\r\n    }\r\n  }, [qAnswered]);\r\n\r\n  const onPlaybackStatusUpdate = (playbackStatus) => {\r\n    if (playbackStatus.isPlaying) {\r\n      // Update your UI for the playing state\r\n      //console.log((playbackStatus.positionMillis / 30000).toFixed(2));\r\n      setProgressBarStatus(playbackStatus.positionMillis / 30000);\r\n    } else {\r\n      // Update your UI for the paused state\r\n    }\r\n\r\n    if (playbackStatus.didJustFinish) {\r\n      if (currentAdIndex === 2) {\r\n        setshowQnA(true);\r\n      } else {\r\n        setCurrentAdIndex(currentAdIndex + 1);\r\n      }\r\n    } else {\r\n    }\r\n  };\r\n  //console.log(adsSelecteData.filter((client) => client.client != value).length);\r\n  //console.log(videoPlayBack);\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar backgroundColor=\"black\" barStyle=\"light-content\" />\r\n      {qNa && showQnA ? (\r\n        <View elevation={5} style={styles.questionContainer}>\r\n          <Text style={styles.question}>{qNa.question}</Text>\r\n          <TouchableNativeFeedback onPress={() => checkAns(1)}>\r\n            <Text style={styles.option}>{qNa.option1}</Text>\r\n          </TouchableNativeFeedback>\r\n\r\n          <TouchableNativeFeedback onPress={() => checkAns(2)}>\r\n            <Text style={styles.option}>{qNa.option2}</Text>\r\n          </TouchableNativeFeedback>\r\n        </View>\r\n      ) : null}\r\n      {adDataToPlay.length < 3 ? (\r\n        <View>\r\n          <Text>Loading</Text>\r\n        </View>\r\n      ) : (\r\n        <View style={styles.adContainer}>\r\n          <View style={styles.adCurrentIndex}>\r\n            <Text style={styles.adCurrentFont}>{currentAdIndex + 1}</Text>\r\n          </View>\r\n\r\n          <ProgressBar\r\n            progress={progressBarStatus}\r\n            color={Colors.blue200}\r\n            style={styles.progressBar}\r\n            visible={true}\r\n          />\r\n          <Video\r\n            source={{\r\n              uri: adDataToPlay[currentAdIndex]\r\n                ? adDataToPlay[currentAdIndex]\r\n                : null,\r\n            }}\r\n            onPlaybackStatusUpdate={(playbackStatus) =>\r\n              onPlaybackStatusUpdate(playbackStatus)\r\n            }\r\n            rate={1.0}\r\n            volume={1.0}\r\n            isMuted={false}\r\n            resizeMode=\"cover\"\r\n            shouldPlay={true}\r\n            style={styles.video}\r\n          />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  correctAnswer: {\r\n    backgroundColor: \"#5eca6c\",\r\n  },\r\n  option: {\r\n    width: \"90%\",\r\n    borderRadius: 10,\r\n    height: \"22%\",\r\n    fontSize: 15,\r\n    fontFamily: \"Poppins-Medium\",\r\n    backgroundColor: \"transparent\",\r\n    color: \"rgba(255, 255, 255, 0.651)\",\r\n    backgroundColor: \"rgba(82, 82, 82, 0.247)\",\r\n    paddingTop: \"4.5%\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginTop: 15,\r\n  },\r\n  question: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    borderRadius: 20,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n    height: \"30%\",\r\n    fontSize: 18,\r\n    fontFamily: \"Poppins-SemiBold\",\r\n    color: \"rgba(255, 255, 255, 0.842)\",\r\n    paddingTop: \"8%\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n  },\r\n  questionContainer: {\r\n    marginTop: \"50%\",\r\n    zIndex: 5,\r\n    width: \"80%\",\r\n    height: \"30%\",\r\n    top: 0,\r\n    backgroundColor: \"#000000\",\r\n    borderRadius: 15,\r\n    borderColor: \"rgba(255, 255, 255, 0.842)\",\r\n    borderWidth: 1,\r\n    position: \"absolute\",\r\n    alignSelf: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  adContainer: {\r\n    width: Dimensions.get(\"window\").width,\r\n    height: Dimensions.get(\"window\").height,\r\n    borderWidth: 2,\r\n    borderStyle: \"solid\",\r\n  },\r\n  progressBar: {\r\n    height: 5,\r\n    width: Dimensions.get(\"window\").width,\r\n    backgroundColor: \"black\",\r\n  },\r\n  video: {\r\n    zIndex: -1,\r\n    width: Dimensions.get(\"window\").width,\r\n    height: Dimensions.get(\"window\").height,\r\n    position: \"absolute\",\r\n    alignSelf: \"center\",\r\n  },\r\n  adCurrentIndex: {\r\n    zIndex: 1,\r\n    position: \"absolute\",\r\n    top: 10,\r\n    alignSelf: \"center\",\r\n    right: 10,\r\n    backgroundColor: \"rgba(209, 209, 209, 0.301)\",\r\n    width: 40,\r\n    height: 40,\r\n    flexDirection: \"row\",\r\n    borderRadius: 50,\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    fontFamily: \"Poppins-Medium\",\r\n  },\r\n  adCurrentFont: {\r\n    fontSize: 18,\r\n    fontFamily: \"Poppins-Medium\",\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    position: \"relative\",\r\n    height: Dimensions.get(\"window\").height,\r\n    backgroundColor: \"black\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
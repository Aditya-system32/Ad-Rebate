{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/run/media/silenttush/Data/WorkSpace/Web Projects/Ad-rebate/Screens/Help.js\";\nimport \"react-native-gesture-handler\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScrollView, TouchableNativeFeedback } from \"react-native-gesture-handler\";\nexport default function HelpScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([{\n    question: \"How to Redeem Coupon\",\n    answer: \"Step 1 - Go to home screen\\nStep 2 - Select Barcode from top right corner\\nStep 3 - Ask for the barcode from shopkeeper and scan the qr code\\nStep 4 - Enter you bill and select the coupon you want to apply\\nStep 5 - Show the Verified coupon and last bill to the shopkeeper and pay the amount give in the app \"\n  }, {\n    question: \"How to Get Coupon\",\n    answer: \"Step 1 - Go to home screen\\nStep 2 -Select the category whose coupon you want\\nStep 3 - Select the café and restaurant whose coupon you want\\nStep 4 - Watch 3 Ads and answer one question\\nStep 5 - You'll get coupon and the coupon will active after 1 hour\"\n  }, {\n    question: \"Why I Can't See My Coupon\",\n    answer: \"Your Coupon Will activate after 1 hour , you can see your coupon in all section \"\n  }]),\n      _useState2 = _slicedToArray(_useState, 2),\n      queries = _useState2[0],\n      setQueries = _useState2[1];\n\n  useEffect(function () {\n    var backAction = function backAction() {\n      navigation.goBack();\n      return true;\n    };\n\n    var backHandler = BackHandler.addEventListener(\"hardwareBackPress\", backAction);\n    return function () {\n      backHandler.remove();\n    };\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    backgroundColor: \"black\",\n    barStyle: \"light-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    style: {\n      width: \"100%\",\n      marginTop: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, queries.map(function (item, index) {\n    var _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        visi = _useState4[0],\n        setvisi = _useState4[1];\n\n    return React.createElement(TouchableNativeFeedback, {\n      style: [styles.query],\n      key: index,\n      onPress: function onPress() {\n        return setvisi(!visi);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: [styles.que],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, item.question), visi ? React.createElement(Text, {\n      style: [styles.ans],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 23\n      }\n    }, item.answer) : null);\n  })));\n}\nvar styles = StyleSheet.create({\n  query: {\n    backgroundColor: \"black\",\n    borderRadius: 10,\n    width: \"80%\",\n    borderColor: \"#424242\",\n    borderWidth: 1,\n    alignSelf: \"center\",\n    margin: 10,\n    minHeight: 60\n  },\n  hidden: {\n    width: 0,\n    height: 0\n  },\n  que: {\n    width: \"100%\",\n    height: 60,\n    paddingHorizontal: 20,\n    color: \"white\",\n    fontFamily: \"Poppins-SemiBold\",\n    fontSize: 15,\n    textAlignVertical: \"center\"\n  },\n  ans: {\n    width: \"100%\",\n    backgroundColor: \"#2c2c2c\",\n    color: \"#eeeeee\",\n    fontSize: 13,\n    lineHeight: 30,\n    padding: 20,\n    textAlignVertical: \"center\",\n    fontFamily: \"Poppins-Regular\"\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"black\"\n  }\n});","map":{"version":3,"sources":["/run/media/silenttush/Data/WorkSpace/Web Projects/Ad-rebate/Screens/Help.js"],"names":["React","useState","useEffect","ScrollView","TouchableNativeFeedback","HelpScreen","navigation","question","answer","queries","setQueries","backAction","goBack","backHandler","BackHandler","addEventListener","remove","styles","container","width","marginTop","map","item","index","visi","setvisi","query","que","ans","StyleSheet","create","backgroundColor","borderRadius","borderColor","borderWidth","alignSelf","margin","minHeight","hidden","height","paddingHorizontal","color","fontFamily","fontSize","textAlignVertical","lineHeight","padding","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import \"react-native-gesture-handler\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  StatusBar,\r\n  BackHandler,\r\n} from \"react-native\";\r\nimport {\r\n  ScrollView,\r\n  TouchableNativeFeedback,\r\n} from \"react-native-gesture-handler\";\r\n\r\nexport default function HelpScreen({ navigation }) {\r\n  const [queries, setQueries] = useState([\r\n    {\r\n      question: \"How to Redeem Coupon\",\r\n      answer:\r\n        \"Step 1 - Go to home screen\\nStep 2 - Select Barcode from top right corner\\nStep 3 - Ask for the barcode from shopkeeper and scan the qr code\\nStep 4 - Enter you bill and select the coupon you want to apply\\nStep 5 - Show the Verified coupon and last bill to the shopkeeper and pay the amount give in the app \",\r\n    },\r\n    {\r\n      question: \"How to Get Coupon\",\r\n      answer:\r\n        \"Step 1 - Go to home screen\\nStep 2 -Select the category whose coupon you want\\nStep 3 - Select the café and restaurant whose coupon you want\\nStep 4 - Watch 3 Ads and answer one question\\nStep 5 - You'll get coupon and the coupon will active after 1 hour\",\r\n    },\r\n    {\r\n      question: \"Why I Can't See My Coupon\",\r\n      answer:\r\n        \"Your Coupon Will activate after 1 hour , you can see your coupon in all section \",\r\n    },\r\n  ]);\r\n  useEffect(() => {\r\n    const backAction = () => {\r\n      navigation.goBack();\r\n      return true;\r\n    };\r\n    const backHandler = BackHandler.addEventListener(\r\n      \"hardwareBackPress\",\r\n      backAction\r\n    );\r\n    return () => {\r\n      backHandler.remove();\r\n    };\r\n  }, []);\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar backgroundColor=\"black\" barStyle=\"light-content\" />\r\n      <ScrollView style={{ width: \"100%\", marginTop: 40 }}>\r\n        {queries.map((item, index) => {\r\n          const [visi, setvisi] = useState(false);\r\n          return (\r\n            <TouchableNativeFeedback\r\n              style={[styles.query]}\r\n              key={index}\r\n              onPress={() => setvisi(!visi)}\r\n            >\r\n              <Text style={[styles.que]}>{item.question}</Text>\r\n              {visi ? <Text style={[styles.ans]}>{item.answer}</Text> : null}\r\n            </TouchableNativeFeedback>\r\n          );\r\n        })}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  query: {\r\n    backgroundColor: \"black\",\r\n    borderRadius: 10,\r\n    width: \"80%\",\r\n    borderColor: \"#424242\",\r\n    borderWidth: 1,\r\n    alignSelf: \"center\",\r\n    margin: 10,\r\n    minHeight: 60,\r\n  },\r\n  hidden: {\r\n    width: 0,\r\n    height: 0,\r\n  },\r\n  que: {\r\n    width: \"100%\",\r\n    height: 60,\r\n    paddingHorizontal: 20,\r\n    color: \"white\",\r\n    fontFamily: \"Poppins-SemiBold\",\r\n    fontSize: 15,\r\n    textAlignVertical: \"center\",\r\n  },\r\n  ans: {\r\n    width: \"100%\",\r\n    backgroundColor: \"#2c2c2c\",\r\n    color: \"#eeeeee\",\r\n    fontSize: 13,\r\n    lineHeight: 30,\r\n    padding: 20,\r\n    textAlignVertical: \"center\",\r\n    fontFamily: \"Poppins-Regular\",\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"black\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
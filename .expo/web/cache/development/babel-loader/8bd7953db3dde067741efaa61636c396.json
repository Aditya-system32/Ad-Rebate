{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WorkSpace\\\\Web Projects\\\\Ad-rebate\\\\Screens\\\\BarcodeScanner.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport Constants from \"expo-constants\";\nimport { TouchableNativeFeedback } from \"react-native-gesture-handler\";\nexport default function BarcodeScanner(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var _Dimensions$get = Dimensions.get(\"window\"),\n      width = _Dimensions$get.width;\n\n  var qrSize = width * 0.7;\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref2) {\n    var type = _ref2.type,\n        data = _ref2.data;\n    setScanned(true);\n\n    try {\n      navigation.navigate(\"Redeem\", {\n        paramKey: data\n      });\n    } catch (_unused) {\n      alert(\"Bar code with type \" + type + \" has not been successfully scanned!\");\n    }\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.cont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: [StyleSheet.absoluteFill, styles.scanner],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Scan Code\"), React.createElement(View, {\n    style: styles.layerTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.layerCenter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.layerLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.focused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.layerRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.layerBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), scanned && React.createElement(TouchableNativeFeedback, {\n    style: styles.button,\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"Scan again\"))));\n}\nvar opacity = \"rgba(0, 0, 0, .7)\";\nvar styles = StyleSheet.create({\n  cont: {\n    width: \"100%\",\n    height: \"100%\",\n    position: \"relative\"\n  },\n  title: {\n    position: \"absolute\",\n    color: \"white\",\n    width: \"100%\",\n    height: 30,\n    fontFamily: \"Poppins-Regular\",\n    textAlign: \"center\",\n    fontSize: 20,\n    marginTop: 120\n  },\n  text: {\n    color: \"#cacaca\",\n    fontFamily: \"Poppins-Regular\"\n  },\n  button: {\n    bottom: 0,\n    left: 0,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderWidth: 2,\n    borderColor: \"#4b4b4b\",\n    width: 130,\n    marginBottom: 20,\n    height: 50,\n    borderRadius: 50,\n    alignSelf: \"center\",\n    backgroundColor: \"black\"\n  },\n  scanner: {\n    zIndex: 1,\n    flex: 1,\n    flexDirection: \"column\",\n    backgroundColor: \"black\"\n  },\n  layerTop: {\n    flex: 0.6,\n    backgroundColor: opacity\n  },\n  layerCenter: {\n    flex: 1,\n    flexDirection: \"row\"\n  },\n  layerLeft: {\n    flex: 1,\n    backgroundColor: opacity\n  },\n  focused: {\n    flex: 10\n  },\n  layerRight: {\n    flex: 1,\n    backgroundColor: opacity\n  },\n  layerBottom: {\n    flex: 0.9,\n    backgroundColor: opacity\n  }\n});","map":{"version":3,"sources":["D:/WorkSpace/Web Projects/Ad-rebate/Screens/BarcodeScanner.js"],"names":["React","useState","useEffect","BarCodeScanner","Constants","TouchableNativeFeedback","BarcodeScanner","navigation","hasPermission","setHasPermission","scanned","setScanned","Dimensions","get","width","qrSize","requestPermissionsAsync","status","handleBarCodeScanned","type","data","navigate","paramKey","alert","styles","cont","undefined","StyleSheet","absoluteFill","scanner","title","layerTop","layerCenter","layerLeft","focused","layerRight","layerBottom","button","text","opacity","create","height","position","color","fontFamily","textAlign","fontSize","marginTop","bottom","left","alignItems","justifyContent","borderWidth","borderColor","marginBottom","borderRadius","alignSelf","backgroundColor","zIndex","flex","flexDirection"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Text, View, StyleSheet, Button, Dimensions } from \"react-native\";\r\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\r\nimport Constants from \"expo-constants\";\r\nimport { TouchableNativeFeedback } from \"react-native-gesture-handler\";\r\nexport default function BarcodeScanner({ navigation }) {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n  const { width } = Dimensions.get(\"window\");\r\n  const qrSize = width * 0.7;\r\n  //REQUEST FOR PERMISSION\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === \"granted\");\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    try {\r\n      navigation.navigate(\"Redeem\", {\r\n        paramKey: data,\r\n      });\r\n    } catch {\r\n      alert(`Bar code with type ${type} has not been successfully scanned!`);\r\n    }\r\n  };\r\n\r\n  //CHECKING THE PERMISSION\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.cont}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={[StyleSheet.absoluteFill, styles.scanner]}\r\n      >\r\n        <Text style={styles.title}>Scan Code</Text>\r\n        <View style={styles.layerTop} />\r\n        <View style={styles.layerCenter}>\r\n          <View style={styles.layerLeft} />\r\n          <View style={styles.focused} />\r\n          <View style={styles.layerRight} />\r\n        </View>\r\n        <View style={styles.layerBottom} />\r\n        {scanned && (\r\n          <TouchableNativeFeedback\r\n            style={styles.button}\r\n            onPress={() => setScanned(false)}\r\n          >\r\n            <Text style={styles.text}>Scan again</Text>\r\n          </TouchableNativeFeedback>\r\n        )}\r\n      </BarCodeScanner>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst opacity = \"rgba(0, 0, 0, .7)\";\r\nconst styles = StyleSheet.create({\r\n  cont: { width: \"100%\", height: \"100%\", position: \"relative\" },\r\n  title: {\r\n    position: \"absolute\",\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    height: 30,\r\n    fontFamily: \"Poppins-Regular\",\r\n    textAlign: \"center\",\r\n    fontSize: 20,\r\n    marginTop: 120,\r\n  },\r\n  text: {\r\n    color: \"#cacaca\",\r\n    fontFamily: \"Poppins-Regular\",\r\n  },\r\n  button: {\r\n    bottom: 0,\r\n    left: 0,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    borderWidth: 2,\r\n    borderColor: \"#4b4b4b\",\r\n    width: 130,\r\n    marginBottom: 20,\r\n    height: 50,\r\n    borderRadius: 50,\r\n    alignSelf: \"center\",\r\n    backgroundColor: \"black\",\r\n  },\r\n  scanner: {\r\n    zIndex: 1,\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"black\",\r\n  },\r\n  layerTop: {\r\n    flex: 0.6,\r\n    backgroundColor: opacity,\r\n  },\r\n  layerCenter: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n  },\r\n  layerLeft: {\r\n    flex: 1,\r\n    backgroundColor: opacity,\r\n  },\r\n  focused: {\r\n    flex: 10,\r\n  },\r\n  layerRight: {\r\n    flex: 1,\r\n    backgroundColor: opacity,\r\n  },\r\n  layerBottom: {\r\n    flex: 0.9,\r\n    backgroundColor: opacity,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}